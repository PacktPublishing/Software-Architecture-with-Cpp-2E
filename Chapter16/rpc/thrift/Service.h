/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Service_H
#define Service_H

#include "service_types.h"
#include <memory>
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>

namespace Service {

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable : 4250) // inheriting methods via dominance
#endif

class ServiceIf {
public:
  virtual ~ServiceIf() {}
  virtual void sayHello(std::string &_return, const std::string &name) = 0;
};

class ServiceIfFactory {
public:
  typedef ServiceIf Handler;

  virtual ~ServiceIfFactory() {}

  virtual ServiceIf *
  getHandler(const ::apache::thrift::TConnectionInfo &connInfo) = 0;
  virtual void releaseHandler(ServiceIf * /* handler */) = 0;
};

class ServiceIfSingletonFactory : virtual public ServiceIfFactory {
public:
  ServiceIfSingletonFactory(const ::std::shared_ptr<ServiceIf> &iface)
      : iface_(iface) {}
  virtual ~ServiceIfSingletonFactory() {}

  virtual ServiceIf *
  getHandler(const ::apache::thrift::TConnectionInfo &) override {
    return iface_.get();
  }
  virtual void releaseHandler(ServiceIf * /* handler */) override {}

protected:
  ::std::shared_ptr<ServiceIf> iface_;
};

class ServiceNull : virtual public ServiceIf {
public:
  virtual ~ServiceNull() {}
  void sayHello(std::string & /* _return */,
                const std::string & /* name */) override {
    return;
  }
};

typedef struct _Service_sayHello_args__isset {
  _Service_sayHello_args__isset() : name(false) {}
  bool name : 1;
} _Service_sayHello_args__isset;

class Service_sayHello_args {
public:
  Service_sayHello_args(const Service_sayHello_args &);
  Service_sayHello_args &operator=(const Service_sayHello_args &);
  Service_sayHello_args() noexcept : name() {}

  virtual ~Service_sayHello_args() noexcept;
  std::string name;

  _Service_sayHello_args__isset __isset;

  void __set_name(const std::string &val);

  bool operator==(const Service_sayHello_args &rhs) const {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator!=(const Service_sayHello_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator<(const Service_sayHello_args &) const;

  uint32_t read(::apache::thrift::protocol::TProtocol *iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;
};

class Service_sayHello_pargs {
public:
  virtual ~Service_sayHello_pargs() noexcept;
  const std::string *name;

  uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;
};

typedef struct _Service_sayHello_result__isset {
  _Service_sayHello_result__isset() : success(false) {}
  bool success : 1;
} _Service_sayHello_result__isset;

class Service_sayHello_result {
public:
  Service_sayHello_result(const Service_sayHello_result &);
  Service_sayHello_result &operator=(const Service_sayHello_result &);
  Service_sayHello_result() noexcept : success() {}

  virtual ~Service_sayHello_result() noexcept;
  std::string success;

  _Service_sayHello_result__isset __isset;

  void __set_success(const std::string &val);

  bool operator==(const Service_sayHello_result &rhs) const {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator!=(const Service_sayHello_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator<(const Service_sayHello_result &) const;

  uint32_t read(::apache::thrift::protocol::TProtocol *iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;
};

typedef struct _Service_sayHello_presult__isset {
  _Service_sayHello_presult__isset() : success(false) {}
  bool success : 1;
} _Service_sayHello_presult__isset;

class Service_sayHello_presult {
public:
  virtual ~Service_sayHello_presult() noexcept;
  std::string *success;

  _Service_sayHello_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol *iprot);
};

class ServiceClient : virtual public ServiceIf {
public:
  ServiceClient(std::shared_ptr<::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ServiceClient(std::shared_ptr<::apache::thrift::protocol::TProtocol> iprot,
                std::shared_ptr<::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot, oprot);
  }

private:
  void
  setProtocol(std::shared_ptr<::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot, prot);
  }
  void
  setProtocol(std::shared_ptr<::apache::thrift::protocol::TProtocol> iprot,
              std::shared_ptr<::apache::thrift::protocol::TProtocol> oprot) {
    piprot_ = iprot;
    poprot_ = oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }

public:
  std::shared_ptr<::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr<::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sayHello(std::string &_return, const std::string &name) override;
  void send_sayHello(const std::string &name);
  void recv_sayHello(std::string &_return);

protected:
  std::shared_ptr<::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr<::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol *iprot_;
  ::apache::thrift::protocol::TProtocol *oprot_;
};

class ServiceProcessor : public ::apache::thrift::TDispatchProcessor {
protected:
  ::std::shared_ptr<ServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol *iprot,
                            ::apache::thrift::protocol::TProtocol *oprot,
                            const std::string &fname, int32_t seqid,
                            void *callContext) override;

private:
  typedef void (ServiceProcessor::*ProcessFunction)(
      int32_t, ::apache::thrift::protocol::TProtocol *,
      ::apache::thrift::protocol::TProtocol *, void *);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_sayHello(int32_t seqid,
                        ::apache::thrift::protocol::TProtocol *iprot,
                        ::apache::thrift::protocol::TProtocol *oprot,
                        void *callContext);

public:
  ServiceProcessor(::std::shared_ptr<ServiceIf> iface) : iface_(iface) {
    processMap_["sayHello"] = &ServiceProcessor::process_sayHello;
  }

  virtual ~ServiceProcessor() {}
};

class ServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
public:
  ServiceProcessorFactory(
      const ::std::shared_ptr<ServiceIfFactory> &handlerFactory) noexcept
      : handlerFactory_(handlerFactory) {}

  ::std::shared_ptr<::apache::thrift::TProcessor>
  getProcessor(const ::apache::thrift::TConnectionInfo &connInfo) override;

protected:
  ::std::shared_ptr<ServiceIfFactory> handlerFactory_;
};

class ServiceMultiface : virtual public ServiceIf {
public:
  ServiceMultiface(std::vector<std::shared_ptr<ServiceIf>> &ifaces)
      : ifaces_(ifaces) {}
  virtual ~ServiceMultiface() {}

protected:
  std::vector<std::shared_ptr<ServiceIf>> ifaces_;
  ServiceMultiface() {}
  void add(::std::shared_ptr<ServiceIf> iface) { ifaces_.push_back(iface); }

public:
  void sayHello(std::string &_return, const std::string &name) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sayHello(_return, name);
    }
    ifaces_[i]->sayHello(_return, name);
    return;
  }
};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ServiceConcurrentClient : virtual public ServiceIf {
public:
  ServiceConcurrentClient(
      std::shared_ptr<::apache::thrift::protocol::TProtocol> prot,
      std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync)
      : sync_(sync) {
    setProtocol(prot);
  }
  ServiceConcurrentClient(
      std::shared_ptr<::apache::thrift::protocol::TProtocol> iprot,
      std::shared_ptr<::apache::thrift::protocol::TProtocol> oprot,
      std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync)
      : sync_(sync) {
    setProtocol(iprot, oprot);
  }

private:
  void
  setProtocol(std::shared_ptr<::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot, prot);
  }
  void
  setProtocol(std::shared_ptr<::apache::thrift::protocol::TProtocol> iprot,
              std::shared_ptr<::apache::thrift::protocol::TProtocol> oprot) {
    piprot_ = iprot;
    poprot_ = oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }

public:
  std::shared_ptr<::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr<::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sayHello(std::string &_return, const std::string &name) override;
  int32_t send_sayHello(const std::string &name);
  void recv_sayHello(std::string &_return, const int32_t seqid);

protected:
  std::shared_ptr<::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr<::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol *iprot_;
  ::apache::thrift::protocol::TProtocol *oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
#pragma warning(pop)
#endif

} // namespace Service

#endif
